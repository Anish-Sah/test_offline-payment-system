
Keypad_Lcd_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000026a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abb  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000648  00000000  00000000  00000e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ee  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000592  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  7a:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)

{

	LCD_DATA = cmd;      // data lines are set to send command*
  82:	88 bb       	out	0x18, r24	; 24

	PORTD  &= ~(1<<rs);  // RS sets 0
  84:	95 98       	cbi	0x12, 5	; 18

	PORTD  &= ~(1<<rw);  // RW sets 0
  86:	96 98       	cbi	0x12, 6	; 18

	PORTD  |= (1<<en);   // make enable from high to low
  88:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop

	_delay_ms(10);

	PORTD  &= ~(1<<en);
  96:	97 98       	cbi	0x12, 7	; 18
  98:	08 95       	ret

0000009a <LCD_write>:

void LCD_write(unsigned char data)

{

	LCD_DATA= data;       // data lines are set to send command
  9a:	88 bb       	out	0x18, r24	; 24

	PORTD  |= (1<<rs);    // RS sets 1
  9c:	95 9a       	sbi	0x12, 5	; 18

	PORTD  &= ~(1<<rw);   // RW sets 0
  9e:	96 98       	cbi	0x12, 6	; 18

	PORTD  |= (1<<en);    // make enable from high to low
  a0:	97 9a       	sbi	0x12, 7	; 18
  a2:	8f e1       	ldi	r24, 0x1F	; 31
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_write+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_write+0x12>
  ac:	00 00       	nop

	_delay_ms(10);

	PORTD &= ~(1<<en);
  ae:	97 98       	cbi	0x12, 7	; 18
  b0:	08 95       	ret

000000b2 <init_LCD>:

void init_LCD(void)

{

	LCD_cmd(0x38);           // initialization in 8bit mode of 16X2 LCD
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <init_LCD+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <init_LCD+0x10>
  c2:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x01);          // make clear LCD
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <init_LCD+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <init_LCD+0x22>
  d4:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x02);          // return home
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <init_LCD+0x2e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <init_LCD+0x34>
  e6:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x06);          // make increment in cursor
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	97 e0       	ldi	r25, 0x07	; 7
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <init_LCD+0x40>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <init_LCD+0x46>
  f8:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x80);          // “8” go to first line and “0” is for 0th position
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 100:	8f ec       	ldi	r24, 0xCF	; 207
 102:	97 e0       	ldi	r25, 0x07	; 7
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_LCD+0x52>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_LCD+0x58>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_Write_String>:

}
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	31 f0       	breq	.+12     	; 0x126 <LCD_Write_String+0x18>
 11a:	21 96       	adiw	r28, 0x01	; 1
	{
		char big = a[i];
		LCD_write(big);
 11c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_write>
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 120:	89 91       	ld	r24, Y+
 122:	81 11       	cpse	r24, r1
 124:	fb cf       	rjmp	.-10     	; 0x11c <LCD_Write_String+0xe>
	{
		char big = a[i];
		LCD_write(big);
	}
	
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <Init>:

#endif

void Init()
{
	KeypadDirectionRegister = 0x0F;
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	84 bb       	out	0x14, r24	; 20
	KeypadPortControl = 0xF0;
 130:	80 ef       	ldi	r24, 0xF0	; 240
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret

00000136 <GetKey>:
}

char GetKey()
{
	//Is Keypad pressed
	if(KeypadPortValue == 0xF0) 	return '!' ;
 136:	83 b3       	in	r24, 0x13	; 19
 138:	80 3f       	cpi	r24, 0xF0	; 240
 13a:	09 f4       	brne	.+2      	; 0x13e <GetKey+0x8>
 13c:	52 c0       	rjmp	.+164    	; 0x1e2 <GetKey+0xac>
 13e:	2f e7       	ldi	r18, 0x7F	; 127
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <GetKey+0xe>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <GetKey+0x18>
 14e:	00 00       	nop
	_delay_ms(50);
	
	//Scan the Keypad
	uint8_t keyPressCode;
	uint8_t keyUpperNib = KeypadPortValue;			//Storing the initial upper nibble of the key pressed
 150:	93 b3       	in	r25, 0x13	; 19
	KeypadPortControl ^= 0xFF;						//Reversing the Port control
 152:	85 b3       	in	r24, 0x15	; 21
 154:	80 95       	com	r24
 156:	85 bb       	out	0x15, r24	; 21
	KeypadDirectionRegister ^= 0xFF;				//Reversing the data direction
 158:	84 b3       	in	r24, 0x14	; 20
 15a:	80 95       	com	r24
 15c:	84 bb       	out	0x14, r24	; 20
	asm volatile ("nop");							//No operation instruction (time for reversing data direction)
 15e:	00 00       	nop
	asm volatile ("nop");
 160:	00 00       	nop
	uint8_t keyLowerNib = KeypadPortValue;			//Storing the Lower Nibble of key pressed
 162:	83 b3       	in	r24, 0x13	; 19
	keyLowerNib &= 0x0F;							//Resetting Upper Nibble changes of Port Value
	keyPressCode = keyUpperNib + keyLowerNib;		//Combining the Upper and Lower Nibbles
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	89 0f       	add	r24, r25
	
	unsigned char DisplayValue =0;

	if(keyPressCode==0xEB)		DisplayValue='1';
 168:	8b 3e       	cpi	r24, 0xEB	; 235
 16a:	31 f0       	breq	.+12     	; 0x178 <GetKey+0x42>
	if(keyPressCode==0xDB)		DisplayValue='2';
 16c:	8b 3d       	cpi	r24, 0xDB	; 219
 16e:	41 f0       	breq	.+16     	; 0x180 <GetKey+0x4a>
	if(keyPressCode==0xBB)		DisplayValue='3';
 170:	8b 3b       	cpi	r24, 0xBB	; 187
 172:	51 f0       	breq	.+20     	; 0x188 <GetKey+0x52>
	asm volatile ("nop");
	uint8_t keyLowerNib = KeypadPortValue;			//Storing the Lower Nibble of key pressed
	keyLowerNib &= 0x0F;							//Resetting Upper Nibble changes of Port Value
	keyPressCode = keyUpperNib + keyLowerNib;		//Combining the Upper and Lower Nibbles
	
	unsigned char DisplayValue =0;
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 c0       	rjmp	.+2      	; 0x17a <GetKey+0x44>

	if(keyPressCode==0xEB)		DisplayValue='1';
 178:	91 e3       	ldi	r25, 0x31	; 49
	if(keyPressCode==0xDB)		DisplayValue='2';
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
 17a:	8d 3e       	cpi	r24, 0xED	; 237
 17c:	49 f0       	breq	.+18     	; 0x190 <GetKey+0x5a>
 17e:	01 c0       	rjmp	.+2      	; 0x182 <GetKey+0x4c>
	keyPressCode = keyUpperNib + keyLowerNib;		//Combining the Upper and Lower Nibbles
	
	unsigned char DisplayValue =0;

	if(keyPressCode==0xEB)		DisplayValue='1';
	if(keyPressCode==0xDB)		DisplayValue='2';
 180:	92 e3       	ldi	r25, 0x32	; 50
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
 182:	8d 3d       	cpi	r24, 0xDD	; 221
 184:	49 f0       	breq	.+18     	; 0x198 <GetKey+0x62>
 186:	01 c0       	rjmp	.+2      	; 0x18a <GetKey+0x54>
	
	unsigned char DisplayValue =0;

	if(keyPressCode==0xEB)		DisplayValue='1';
	if(keyPressCode==0xDB)		DisplayValue='2';
	if(keyPressCode==0xBB)		DisplayValue='3';
 188:	93 e3       	ldi	r25, 0x33	; 51
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
 18a:	8d 3b       	cpi	r24, 0xBD	; 189
 18c:	49 f0       	breq	.+18     	; 0x1a0 <GetKey+0x6a>
 18e:	01 c0       	rjmp	.+2      	; 0x192 <GetKey+0x5c>
	unsigned char DisplayValue =0;

	if(keyPressCode==0xEB)		DisplayValue='1';
	if(keyPressCode==0xDB)		DisplayValue='2';
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
 190:	94 e3       	ldi	r25, 0x34	; 52
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
 192:	8e 3e       	cpi	r24, 0xEE	; 238
 194:	49 f0       	breq	.+18     	; 0x1a8 <GetKey+0x72>
 196:	01 c0       	rjmp	.+2      	; 0x19a <GetKey+0x64>

	if(keyPressCode==0xEB)		DisplayValue='1';
	if(keyPressCode==0xDB)		DisplayValue='2';
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
 198:	95 e3       	ldi	r25, 0x35	; 53
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
 19a:	8e 3d       	cpi	r24, 0xDE	; 222
 19c:	49 f0       	breq	.+18     	; 0x1b0 <GetKey+0x7a>
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <GetKey+0x6c>
	if(keyPressCode==0xEB)		DisplayValue='1';
	if(keyPressCode==0xDB)		DisplayValue='2';
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
 1a0:	96 e3       	ldi	r25, 0x36	; 54
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
 1a2:	8e 3b       	cpi	r24, 0xBE	; 190
 1a4:	49 f0       	breq	.+18     	; 0x1b8 <GetKey+0x82>
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <GetKey+0x74>
	if(keyPressCode==0xDB)		DisplayValue='2';
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
 1a8:	97 e3       	ldi	r25, 0x37	; 55
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
 1aa:	87 3d       	cpi	r24, 0xD7	; 215
 1ac:	49 f0       	breq	.+18     	; 0x1c0 <GetKey+0x8a>
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <GetKey+0x7c>
	if(keyPressCode==0xBB)		DisplayValue='3';
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
 1b0:	98 e3       	ldi	r25, 0x38	; 56
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
	if(keyPressCode==0xE7)		DisplayValue='N';
 1b2:	87 3e       	cpi	r24, 0xE7	; 231
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <GetKey+0x92>
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <GetKey+0x84>
	if(keyPressCode==0xED)		DisplayValue='4';
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
 1b8:	99 e3       	ldi	r25, 0x39	; 57
	if(keyPressCode==0xD7)		DisplayValue='0';
	if(keyPressCode==0xE7)		DisplayValue='N';
	if(keyPressCode==0xB7)		DisplayValue='=';
 1ba:	87 3b       	cpi	r24, 0xB7	; 183
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <GetKey+0x9a>
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <GetKey+0x8c>
	if(keyPressCode==0xDD)		DisplayValue='5';
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
 1c0:	90 e3       	ldi	r25, 0x30	; 48
	if(keyPressCode==0xE7)		DisplayValue='N';
	if(keyPressCode==0xB7)		DisplayValue='=';
	if(keyPressCode==0x77)		DisplayValue='+';
 1c2:	87 37       	cpi	r24, 0x77	; 119
 1c4:	49 f0       	breq	.+18     	; 0x1d8 <GetKey+0xa2>
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <GetKey+0x94>
	if(keyPressCode==0xBD)		DisplayValue='6';
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
	if(keyPressCode==0xE7)		DisplayValue='N';
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
	if(keyPressCode==0xB7)		DisplayValue='=';
	if(keyPressCode==0x77)		DisplayValue='+';
	if(keyPressCode==0x7B)		DisplayValue='-';
 1ca:	8b 37       	cpi	r24, 0x7B	; 123
 1cc:	61 f0       	breq	.+24     	; 0x1e6 <GetKey+0xb0>
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <GetKey+0x9c>
	if(keyPressCode==0xEE)		DisplayValue='7';
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
	if(keyPressCode==0xE7)		DisplayValue='N';
	if(keyPressCode==0xB7)		DisplayValue='=';
 1d0:	9d e3       	ldi	r25, 0x3D	; 61
	if(keyPressCode==0x77)		DisplayValue='+';
	if(keyPressCode==0x7B)		DisplayValue='-';
	if(keyPressCode==0x7D)		DisplayValue='x';
 1d2:	8d 37       	cpi	r24, 0x7D	; 125
 1d4:	51 f0       	breq	.+20     	; 0x1ea <GetKey+0xb4>
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <GetKey+0xa4>
	if(keyPressCode==0xDE)		DisplayValue='8';
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
	if(keyPressCode==0xE7)		DisplayValue='N';
	if(keyPressCode==0xB7)		DisplayValue='=';
	if(keyPressCode==0x77)		DisplayValue='+';
 1d8:	9b e2       	ldi	r25, 0x2B	; 43
	if(keyPressCode==0x7B)		DisplayValue='-';
	if(keyPressCode==0x7D)		DisplayValue='x';
	if(keyPressCode==0x7E)		DisplayValue='/';
 1da:	8e 37       	cpi	r24, 0x7E	; 126
 1dc:	41 f4       	brne	.+16     	; 0x1ee <GetKey+0xb8>
 1de:	8f e2       	ldi	r24, 0x2F	; 47
 1e0:	08 95       	ret
}

char GetKey()
{
	//Is Keypad pressed
	if(KeypadPortValue == 0xF0) 	return '!' ;
 1e2:	81 e2       	ldi	r24, 0x21	; 33
 1e4:	08 95       	ret
	if(keyPressCode==0xBE)		DisplayValue='9';
	if(keyPressCode==0xD7)		DisplayValue='0';
	if(keyPressCode==0xE7)		DisplayValue='N';
	if(keyPressCode==0xB7)		DisplayValue='=';
	if(keyPressCode==0x77)		DisplayValue='+';
	if(keyPressCode==0x7B)		DisplayValue='-';
 1e6:	8d e2       	ldi	r24, 0x2D	; 45
 1e8:	08 95       	ret
	if(keyPressCode==0x7D)		DisplayValue='x';
 1ea:	88 e7       	ldi	r24, 0x78	; 120
 1ec:	08 95       	ret
 1ee:	89 2f       	mov	r24, r25
	if(keyPressCode==0x7E)		DisplayValue='/';
	return DisplayValue;
	Init();										//Resetting all the led and keypad
	
 1f0:	08 95       	ret

000001f2 <main>:

int main(void)

{
	char key;	
	DDRB=0xFF;              // set LCD data port as output
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	87 bb       	out	0x17, r24	; 23
	DDRD=0xE0;              // set LCD signals (RS, RW, E) as out put
 1f6:	80 ee       	ldi	r24, 0xE0	; 224
 1f8:	81 bb       	out	0x11, r24	; 17

	init_LCD();             // initialize LCD
 1fa:	0e 94 59 00 	call	0xb2	; 0xb2 <init_LCD>
 1fe:	8f e1       	ldi	r24, 0x1F	; 31
 200:	9e e4       	ldi	r25, 0x4E	; 78
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x10>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x16>
 208:	00 00       	nop
	_delay_ms(10);         // delay of 10 Milli seconds
	
	LCD_cmd(0x0C);			//display on, cursor off
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 210:	8f e1       	ldi	r24, 0x1F	; 31
 212:	9e e4       	ldi	r25, 0x4E	; 78
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x22>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x28>
 21a:	00 00       	nop
	_delay_ms(10);
	//LCD display asking for amount
	
	LCD_Write_String("ENTER  AMOUNT:  ");
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Write_String>
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x36>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x3c>
 22e:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0xC0);			// move cursor to the beginning of the 2nd row
 230:	80 ec       	ldi	r24, 0xC0	; 192
 232:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x48>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x4e>
 240:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x0E);			//display on, cursor on
 242:	8e e0       	ldi	r24, 0x0E	; 14
 244:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	9e e4       	ldi	r25, 0x4E	; 78
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x5a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x60>
 252:	00 00       	nop
	_delay_ms(10);
		
	Init();
 254:	0e 94 96 00 	call	0x12c	; 0x12c <Init>
	while(1)
	{
		key= GetKey();				//Getting key by polling method
 258:	0e 94 9b 00 	call	0x136	; 0x136 <GetKey>
		if(key!='!')
 25c:	81 32       	cpi	r24, 0x21	; 33
 25e:	e1 f3       	breq	.-8      	; 0x258 <main+0x66>
			LCD_write(key);
 260:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_write>
 264:	f9 cf       	rjmp	.-14     	; 0x258 <main+0x66>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
