
Keypad_Lcd_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000a4  008000a4  00000502  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e54  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069d  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000836  00000000  00000000  00002682  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 20 01 	call	0x240	; 0x240 <main>
  8a:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)

{

	LCD_DATA = cmd;      // data lines are set to send command*
  92:	88 bb       	out	0x18, r24	; 24

	PORTD  &= ~(1<<rs);  // RS sets 0
  94:	95 98       	cbi	0x12, 5	; 18

	PORTD  &= ~(1<<rw);  // RW sets 0
  96:	96 98       	cbi	0x12, 6	; 18

	PORTD  |= (1<<en);   // make enable from high to low
  98:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e1       	ldi	r24, 0x1F	; 31
  9c:	9e e4       	ldi	r25, 0x4E	; 78
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_cmd+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_cmd+0x12>
  a4:	00 00       	nop

	_delay_ms(10);

	PORTD  &= ~(1<<en);
  a6:	97 98       	cbi	0x12, 7	; 18
  a8:	08 95       	ret

000000aa <LCD_write>:

void LCD_write(unsigned char data)

{

	LCD_DATA= data;       // data lines are set to send command
  aa:	88 bb       	out	0x18, r24	; 24

	PORTD  |= (1<<rs);    // RS sets 1
  ac:	95 9a       	sbi	0x12, 5	; 18

	PORTD  &= ~(1<<rw);   // RW sets 0
  ae:	96 98       	cbi	0x12, 6	; 18

	PORTD  |= (1<<en);    // make enable from high to low
  b0:	97 9a       	sbi	0x12, 7	; 18
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	9e e4       	ldi	r25, 0x4E	; 78
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_write+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_write+0x12>
  bc:	00 00       	nop

	_delay_ms(10);

	PORTD &= ~(1<<en);
  be:	97 98       	cbi	0x12, 7	; 18
  c0:	08 95       	ret

000000c2 <init_LCD>:

void init_LCD(void)

{

	LCD_cmd(0x38);           // initialization in 8bit mode of 16X2 LCD
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <init_LCD+0xa>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <init_LCD+0x10>
  d2:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x01);          // make clear LCD
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	97 e0       	ldi	r25, 0x07	; 7
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <init_LCD+0x1c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <init_LCD+0x22>
  e4:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x02);          // return home
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <init_LCD+0x2e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <init_LCD+0x34>
  f6:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x06);          // make increment in cursor
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  fe:	8f ec       	ldi	r24, 0xCF	; 207
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <init_LCD+0x40>
 106:	00 c0       	rjmp	.+0      	; 0x108 <init_LCD+0x46>
 108:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x80);          // “8” go to first line and “0” is for 0th position
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <init_LCD+0x52>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_LCD+0x58>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <LCD_Write_String>:

}
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	31 f0       	breq	.+12     	; 0x136 <LCD_Write_String+0x18>
 12a:	21 96       	adiw	r28, 0x01	; 1
	{
		char big = a[i];
		LCD_write(big);
 12c:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_write>
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 130:	89 91       	ld	r24, Y+
 132:	81 11       	cpse	r24, r1
 134:	fb cf       	rjmp	.-10     	; 0x12c <LCD_Write_String+0xe>
	{
		char big = a[i];
		LCD_write(big);
	}
	
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <KeypadInit>:

char DisplayValue;

void KeypadInit()
{
	KeypadDirectionRegister = 0x0F;
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	84 bb       	out	0x14, r24	; 20
	KeypadPortControl = 0xF0;
 140:	80 ef       	ldi	r24, 0xF0	; 240
 142:	85 bb       	out	0x15, r24	; 21
 144:	08 95       	ret

00000146 <GetKey>:
}

char GetKey()
{
	//Is Keypad pressed
	if(KeypadPortValue == 0xF0) 	return '!' ;
 146:	83 b3       	in	r24, 0x13	; 19
 148:	80 3f       	cpi	r24, 0xF0	; 240
 14a:	09 f4       	brne	.+2      	; 0x14e <GetKey+0x8>
 14c:	77 c0       	rjmp	.+238    	; 0x23c <GetKey+0xf6>
 14e:	2f e7       	ldi	r18, 0x7F	; 127
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <GetKey+0xe>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <GetKey+0x18>
 15e:	00 00       	nop
	_delay_ms(50);
	
	//Scan the Keypad
	uint8_t keyPressCode;
	uint8_t keyUpperNib = KeypadPortValue;			//Storing the initial upper nibble of the key pressed
 160:	93 b3       	in	r25, 0x13	; 19
	KeypadPortControl ^= 0xFF;						//Reversing the Port control
 162:	85 b3       	in	r24, 0x15	; 21
 164:	80 95       	com	r24
 166:	85 bb       	out	0x15, r24	; 21
	KeypadDirectionRegister ^= 0xFF;				//Reversing the data direction
 168:	84 b3       	in	r24, 0x14	; 20
 16a:	80 95       	com	r24
 16c:	84 bb       	out	0x14, r24	; 20
	asm volatile ("nop");							//No operation instruction (time for reversing data direction)
 16e:	00 00       	nop
	asm volatile ("nop");							//No operation instruction (time for reversing data direction)
 170:	00 00       	nop
	uint8_t keyLowerNib = KeypadPortValue;			//Storing the Lower Nibble of key pressed
 172:	83 b3       	in	r24, 0x13	; 19
	keyLowerNib &= 0x0F;							//Resetting Upper Nibble changes of Port Value
	keyPressCode = keyUpperNib + keyLowerNib;		//Combining the Upper and Lower Nibbles
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	89 0f       	add	r24, r25
	
	if(keyPressCode==0xEB)		DisplayValue='1';
 178:	8b 3e       	cpi	r24, 0xEB	; 235
 17a:	21 f4       	brne	.+8      	; 0x184 <GetKey+0x3e>
 17c:	91 e3       	ldi	r25, 0x31	; 49
 17e:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 182:	0c c0       	rjmp	.+24     	; 0x19c <GetKey+0x56>
	if(keyPressCode==0xDB)		DisplayValue='2';
 184:	8b 3d       	cpi	r24, 0xDB	; 219
 186:	21 f4       	brne	.+8      	; 0x190 <GetKey+0x4a>
 188:	92 e3       	ldi	r25, 0x32	; 50
 18a:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <GetKey+0x62>
	if(keyPressCode==0xBB)		DisplayValue='3';
 190:	8b 3b       	cpi	r24, 0xBB	; 187
 192:	21 f4       	brne	.+8      	; 0x19c <GetKey+0x56>
 194:	93 e3       	ldi	r25, 0x33	; 51
 196:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 19a:	0c c0       	rjmp	.+24     	; 0x1b4 <GetKey+0x6e>
	if(keyPressCode==0xED)		DisplayValue='4';
 19c:	8d 3e       	cpi	r24, 0xED	; 237
 19e:	21 f4       	brne	.+8      	; 0x1a8 <GetKey+0x62>
 1a0:	94 e3       	ldi	r25, 0x34	; 52
 1a2:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <GetKey+0x7a>
	if(keyPressCode==0xDD)		DisplayValue='5';
 1a8:	8d 3d       	cpi	r24, 0xDD	; 221
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <GetKey+0x6e>
 1ac:	95 e3       	ldi	r25, 0x35	; 53
 1ae:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <GetKey+0x86>
	if(keyPressCode==0xBD)		DisplayValue='6';
 1b4:	8d 3b       	cpi	r24, 0xBD	; 189
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <GetKey+0x7a>
 1b8:	96 e3       	ldi	r25, 0x36	; 54
 1ba:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <GetKey+0x92>
	if(keyPressCode==0xEE)		DisplayValue='7';
 1c0:	8e 3e       	cpi	r24, 0xEE	; 238
 1c2:	21 f4       	brne	.+8      	; 0x1cc <GetKey+0x86>
 1c4:	97 e3       	ldi	r25, 0x37	; 55
 1c6:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <GetKey+0x9e>
	if(keyPressCode==0xDE)		DisplayValue='8';
 1cc:	8e 3d       	cpi	r24, 0xDE	; 222
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <GetKey+0x92>
 1d0:	98 e3       	ldi	r25, 0x38	; 56
 1d2:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <GetKey+0xaa>
	if(keyPressCode==0xBE)		DisplayValue='9';
 1d8:	8e 3b       	cpi	r24, 0xBE	; 190
 1da:	21 f4       	brne	.+8      	; 0x1e4 <GetKey+0x9e>
 1dc:	99 e3       	ldi	r25, 0x39	; 57
 1de:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <GetKey+0xb6>
	if(keyPressCode==0xD7)		DisplayValue='0';
 1e4:	87 3d       	cpi	r24, 0xD7	; 215
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <GetKey+0xaa>
 1e8:	90 e3       	ldi	r25, 0x30	; 48
 1ea:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <GetKey+0xc2>
	if(keyPressCode==0xE7)		DisplayValue='N';
 1f0:	87 3e       	cpi	r24, 0xE7	; 231
 1f2:	21 f4       	brne	.+8      	; 0x1fc <GetKey+0xb6>
 1f4:	9e e4       	ldi	r25, 0x4E	; 78
 1f6:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <GetKey+0xce>
	if(keyPressCode==0xB7)		DisplayValue=' ';		//Equal to
 1fc:	87 3b       	cpi	r24, 0xB7	; 183
 1fe:	21 f4       	brne	.+8      	; 0x208 <GetKey+0xc2>
 200:	90 e2       	ldi	r25, 0x20	; 32
 202:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 206:	0c c0       	rjmp	.+24     	; 0x220 <GetKey+0xda>
	if(keyPressCode==0x77)		DisplayValue='+';
 208:	87 37       	cpi	r24, 0x77	; 119
 20a:	21 f4       	brne	.+8      	; 0x214 <GetKey+0xce>
 20c:	9b e2       	ldi	r25, 0x2B	; 43
 20e:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <DisplayValue>
 212:	0c c0       	rjmp	.+24     	; 0x22c <GetKey+0xe6>
	if(keyPressCode==0x7B)		DisplayValue='-';
 214:	8b 37       	cpi	r24, 0x7B	; 123
 216:	21 f4       	brne	.+8      	; 0x220 <GetKey+0xda>
 218:	8d e2       	ldi	r24, 0x2D	; 45
 21a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <DisplayValue>
 21e:	0b c0       	rjmp	.+22     	; 0x236 <GetKey+0xf0>
	if(keyPressCode==0x7D)		DisplayValue='x';
 220:	8d 37       	cpi	r24, 0x7D	; 125
 222:	21 f4       	brne	.+8      	; 0x22c <GetKey+0xe6>
 224:	88 e7       	ldi	r24, 0x78	; 120
 226:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <DisplayValue>
 22a:	05 c0       	rjmp	.+10     	; 0x236 <GetKey+0xf0>
	if(keyPressCode==0x7E)		DisplayValue='/';
 22c:	8e 37       	cpi	r24, 0x7E	; 126
 22e:	19 f4       	brne	.+6      	; 0x236 <GetKey+0xf0>
 230:	8f e2       	ldi	r24, 0x2F	; 47
 232:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <DisplayValue>
	return DisplayValue;
 236:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <DisplayValue>
 23a:	08 95       	ret
}

char GetKey()
{
	//Is Keypad pressed
	if(KeypadPortValue == 0xF0) 	return '!' ;
 23c:	81 e2       	ldi	r24, 0x21	; 33
	if(keyPressCode==0x7B)		DisplayValue='-';
	if(keyPressCode==0x7D)		DisplayValue='x';
	if(keyPressCode==0x7E)		DisplayValue='/';
	return DisplayValue;
	
 23e:	08 95       	ret

00000240 <main>:
}

int main(void)
{ 
	//Setting for LCD
	DDRB=0xFF;              // set LCD data port as output
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	87 bb       	out	0x17, r24	; 23
	DDRD=0xE4;              // set LCD signals (RS, RW, E) as out put
 244:	84 ee       	ldi	r24, 0xE4	; 228
 246:	81 bb       	out	0x11, r24	; 17
	
	//Setting interrupt 
	PORTD |=1<<PIND3;
 248:	93 9a       	sbi	0x12, 3	; 18
	GICR |= 1<<INT1;
 24a:	8b b7       	in	r24, 0x3b	; 59
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8b bf       	out	0x3b, r24	; 59
	sei();
 250:	78 94       	sei
	
	//LCD initialization
	init_LCD();             // initialize LCD
 252:	0e 94 61 00 	call	0xc2	; 0xc2 <init_LCD>
 256:	8f e1       	ldi	r24, 0x1F	; 31
 258:	9e e4       	ldi	r25, 0x4E	; 78
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x1a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x20>
 260:	00 00       	nop
	_delay_ms(10);         // delay of 10 Milli seconds
	LCD_cmd(0x0C);			//display on, cursor off
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 268:	8f e1       	ldi	r24, 0x1F	; 31
 26a:	9e e4       	ldi	r25, 0x4E	; 78
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x2c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x32>
 272:	00 00       	nop
 274:	ff cf       	rjmp	.-2      	; 0x274 <main+0x34>

00000276 <AskAmount>:
}


void AskAmount()
{
	LCD_cmd(0x01);			//Clear Display
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 27c:	8f e1       	ldi	r24, 0x1F	; 31
 27e:	9e e4       	ldi	r25, 0x4E	; 78
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <AskAmount+0xa>
 284:	00 c0       	rjmp	.+0      	; 0x286 <AskAmount+0x10>
 286:	00 00       	nop
	_delay_ms(10);
	LCD_Write_String("ENTER  AMOUNT:");
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Write_String>
 290:	8f e1       	ldi	r24, 0x1F	; 31
 292:	9e e4       	ldi	r25, 0x4E	; 78
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <AskAmount+0x1e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <AskAmount+0x24>
 29a:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0xC0);			// move cursor to the beginning of the 2nd row
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 2a2:	8f e1       	ldi	r24, 0x1F	; 31
 2a4:	9e e4       	ldi	r25, 0x4E	; 78
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <AskAmount+0x30>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <AskAmount+0x36>
 2ac:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x0E);			//display on, cursor on
 2ae:	8e e0       	ldi	r24, 0x0E	; 14
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	9e e4       	ldi	r25, 0x4E	; 78
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <AskAmount+0x42>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <AskAmount+0x48>
 2be:	00 00       	nop
 2c0:	08 95       	ret

000002c2 <DisplayMsg>:
	_delay_ms(10);
}

void DisplayMsg()
{
	LCD_cmd(0x01);				//Clear Screen
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 2c8:	8f e1       	ldi	r24, 0x1F	; 31
 2ca:	9e e4       	ldi	r25, 0x4E	; 78
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <DisplayMsg+0xa>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <DisplayMsg+0x10>
 2d2:	00 00       	nop
	_delay_ms(10);
	LCD_Write_String("Processing...");
 2d4:	8f e6       	ldi	r24, 0x6F	; 111
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Write_String>
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	29 e6       	ldi	r18, 0x69	; 105
 2e0:	88 e1       	ldi	r24, 0x18	; 24
 2e2:	91 50       	subi	r25, 0x01	; 1
 2e4:	20 40       	sbci	r18, 0x00	; 0
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <DisplayMsg+0x20>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <DisplayMsg+0x2a>
 2ec:	00 00       	nop
	_delay_ms(1000);
	LCD_cmd(0x01);				//Clear Screen
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 2f4:	8f e1       	ldi	r24, 0x1F	; 31
 2f6:	9e e4       	ldi	r25, 0x4E	; 78
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <DisplayMsg+0x36>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <DisplayMsg+0x3c>
 2fe:	00 00       	nop
	_delay_ms(10);
	LCD_Write_String("Transaction");
 300:	8d e7       	ldi	r24, 0x7D	; 125
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Write_String>
	LCD_cmd(0xC0);			// move cursor to the beginning of the 2nd row
 308:	80 ec       	ldi	r24, 0xC0	; 192
 30a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 30e:	8f e1       	ldi	r24, 0x1F	; 31
 310:	9e e4       	ldi	r25, 0x4E	; 78
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <DisplayMsg+0x50>
 316:	00 c0       	rjmp	.+0      	; 0x318 <DisplayMsg+0x56>
 318:	00 00       	nop
	_delay_ms(10);
	LCD_Write_String("Complete.");
 31a:	89 e8       	ldi	r24, 0x89	; 137
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Write_String>
 322:	9f ef       	ldi	r25, 0xFF	; 255
 324:	29 e6       	ldi	r18, 0x69	; 105
 326:	88 e1       	ldi	r24, 0x18	; 24
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	20 40       	sbci	r18, 0x00	; 0
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <DisplayMsg+0x66>
 330:	00 c0       	rjmp	.+0      	; 0x332 <DisplayMsg+0x70>
 332:	00 00       	nop
 334:	08 95       	ret

00000336 <DisplayBalance>:
	_delay_ms(1000);
}

void DisplayBalance()
{
	LCD_cmd(0x01);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 33c:	8f e1       	ldi	r24, 0x1F	; 31
 33e:	9e e4       	ldi	r25, 0x4E	; 78
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <DisplayBalance+0xa>
 344:	00 c0       	rjmp	.+0      	; 0x346 <DisplayBalance+0x10>
 346:	00 00       	nop
	_delay_ms(10);
	LCD_Write_String("Current Balance:");
 348:	83 e9       	ldi	r24, 0x93	; 147
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Write_String>
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	9e e4       	ldi	r25, 0x4E	; 78
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <DisplayBalance+0x1e>
 358:	00 c0       	rjmp	.+0      	; 0x35a <DisplayBalance+0x24>
 35a:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0xC0);			// move cursor to the beginning of the 2nd row
 35c:	80 ec       	ldi	r24, 0xC0	; 192
 35e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 362:	8f e1       	ldi	r24, 0x1F	; 31
 364:	9e e4       	ldi	r25, 0x4E	; 78
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <DisplayBalance+0x30>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <DisplayBalance+0x36>
 36c:	00 00       	nop
	_delay_ms(10);
	for(i=0;i<5;i++)
 36e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 372:	e0 e0       	ldi	r30, 0x00	; 0
		{
			LCD_write(key[i]);
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	eb 55       	subi	r30, 0x5B	; 91
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	80 81       	ld	r24, Z
 37c:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_write>
	_delay_ms(10);
	LCD_Write_String("Current Balance:");
	_delay_ms(10);
	LCD_cmd(0xC0);			// move cursor to the beginning of the 2nd row
	_delay_ms(10);
	for(i=0;i<5;i++)
 380:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <__data_end>
 384:	ef 5f       	subi	r30, 0xFF	; 255
 386:	e0 93 a4 00 	sts	0x00A4, r30	; 0x8000a4 <__data_end>
 38a:	e5 30       	cpi	r30, 0x05	; 5
 38c:	98 f3       	brcs	.-26     	; 0x374 <DisplayBalance+0x3e>
		{
			LCD_write(key[i]);
		}
 38e:	08 95       	ret

00000390 <__vector_2>:
void DisplayBalance();
void AskAmount();
void DisplayMsg();

ISR(INT1_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	AskAmount();
 3b6:	0e 94 3b 01 	call	0x276	; 0x276 <AskAmount>
	do
	{
		KeypadInit();
 3ba:	0e 94 9e 00 	call	0x13c	; 0x13c <KeypadInit>
		do
		{
			key[i]= GetKey();
 3be:	c0 91 a4 00 	lds	r28, 0x00A4	; 0x8000a4 <__data_end>
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
 3c4:	0e 94 a3 00 	call	0x146	; 0x146 <GetKey>
 3c8:	cb 55       	subi	r28, 0x5B	; 91
 3ca:	df 4f       	sbci	r29, 0xFF	; 255
 3cc:	88 83       	st	Y, r24
		} while (key[i]=='!');
 3ce:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <__data_end>
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	eb 55       	subi	r30, 0x5B	; 91
 3d6:	ff 4f       	sbci	r31, 0xFF	; 255
 3d8:	80 81       	ld	r24, Z
 3da:	81 32       	cpi	r24, 0x21	; 33
 3dc:	81 f3       	breq	.-32     	; 0x3be <__vector_2+0x2e>
		LCD_write(key[i]);
 3de:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_write>
		i++;
 3e2:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <__data_end>
 3e6:	ef 5f       	subi	r30, 0xFF	; 255
 3e8:	e0 93 a4 00 	sts	0x00A4, r30	; 0x8000a4 <__data_end>
	}while(key[i-1]!=' ');
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ec 55       	subi	r30, 0x5C	; 92
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	80 81       	ld	r24, Z
 3f4:	80 32       	cpi	r24, 0x20	; 32
 3f6:	09 f7       	brne	.-62     	; 0x3ba <__vector_2+0x2a>
	//InputAmt = InputAmt*10 +(key[i-1]+48);
	//Balance += InputAmt;
	DisplayMsg();
 3f8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DisplayMsg>
	DisplayBalance();
 3fc:	0e 94 9b 01 	call	0x336	; 0x336 <DisplayBalance>
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
