
Lcd_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039a  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000455  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  7a:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)

{

	LCD_DATA = cmd;      // data lines are set to send command*
  82:	88 bb       	out	0x18, r24	; 24

	PORTD  &= ~(1<<rs);  // RS sets 0
  84:	95 98       	cbi	0x12, 5	; 18

	PORTD  &= ~(1<<rw);  // RW sets 0
  86:	96 98       	cbi	0x12, 6	; 18

	PORTD  |= (1<<en);   // make enable from high to low
  88:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9c e9       	ldi	r25, 0x9C	; 156
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <LCD_cmd+0x12>
  94:	00 00       	nop

	_delay_ms(10);

	PORTD  &= ~(1<<en);
  96:	97 98       	cbi	0x12, 7	; 18
  98:	08 95       	ret

0000009a <LCD_write>:

void LCD_write(unsigned char data)

{

	LCD_DATA= data;       // data lines are set to send command
  9a:	88 bb       	out	0x18, r24	; 24

	PORTD  |= (1<<rs);    // RS sets 1
  9c:	95 9a       	sbi	0x12, 5	; 18

	PORTD  &= ~(1<<rw);   // RW sets 0
  9e:	96 98       	cbi	0x12, 6	; 18

	PORTD  |= (1<<en);    // make enable from high to low
  a0:	97 9a       	sbi	0x12, 7	; 18
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	9c e9       	ldi	r25, 0x9C	; 156
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_write+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_write+0x12>
  ac:	00 00       	nop

	_delay_ms(10);

	PORTD &= ~(1<<en);
  ae:	97 98       	cbi	0x12, 7	; 18
  b0:	08 95       	ret

000000b2 <init_LCD>:

void init_LCD(void)

{

	LCD_cmd(0x38);           // initialization in 8bit mode of 16X2 LCD
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <init_LCD+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <init_LCD+0x10>
  c2:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x01);          // make clear LCD
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <init_LCD+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <init_LCD+0x22>
  d4:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x02);          // return home
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  dc:	8f e9       	ldi	r24, 0x9F	; 159
  de:	9f e0       	ldi	r25, 0x0F	; 15
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <init_LCD+0x2e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <init_LCD+0x34>
  e6:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x06);          // make increment in cursor
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <init_LCD+0x40>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <init_LCD+0x46>
  f8:	00 00       	nop

	_delay_ms(1);

	LCD_cmd(0x80);          // “8” go to first line and “0” is for 0th position
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <init_LCD+0x52>
 108:	00 c0       	rjmp	.+0      	; 0x10a <init_LCD+0x58>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_Write_String>:

}
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	31 f0       	breq	.+12     	; 0x126 <LCD_Write_String+0x18>
 11a:	21 96       	adiw	r28, 0x01	; 1
	{
		char big = a[i];
		LCD_write(big);
 11c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_write>
//*****************write STRING on LCD*****************//

void LCD_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 120:	89 91       	ld	r24, Y+
 122:	81 11       	cpse	r24, r1
 124:	fb cf       	rjmp	.-10     	; 0x11c <LCD_Write_String+0xe>
	{
		char big = a[i];
		LCD_write(big);
	}
	
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

int main(void)

{

	DDRB=0xFF;              // set LCD data port as output
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	87 bb       	out	0x17, r24	; 23

	DDRD=0xE0;              // set LCD signals (RS, RW, E) as out put
 130:	80 ee       	ldi	r24, 0xE0	; 224
 132:	81 bb       	out	0x11, r24	; 17

	init_LCD();             // initialize LCD
 134:	0e 94 59 00 	call	0xb2	; 0xb2 <init_LCD>
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x10>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x16>
 142:	00 00       	nop
	_delay_ms(10);         // delay of 10 Milli seconds
	
	LCD_cmd(0x0C);			//display on, cursor off
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x22>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x28>
 154:	00 00       	nop
	_delay_ms(10);
	//LCD display asking for amount
	
	LCD_Write_String("ENTER  AMOUNT:  ");
 156:	80 e6       	ldi	r24, 0x60	; 96
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Write_String>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x36>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x3c>
 168:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0xC0);			// move cursor to the beginning of the 2nd row
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9c e9       	ldi	r25, 0x9C	; 156
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x48>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x4e>
 17a:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x0E);			//display on, cursor on
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	21 ee       	ldi	r18, 0xE1	; 225
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	91 50       	subi	r25, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x5c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x66>
 192:	00 00       	nop
	 
	
	
	return 0;
	
}
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
